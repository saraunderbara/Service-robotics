import lejos.nxt.LCD;
import lejos.nxt.Motor;
import lejos.nxt.Sound;
import lejos.robotics.localization.OdometryPoseProvider;
import lejos.robotics.localization.PoseProvider;
import lejos.robotics.navigation.DifferentialPilot;
import lejos.robotics.navigation.Navigator;
import lejos.robotics.navigation.Pose;

public class motors extends Thread {

	

	private DifferentialPilot motors;
	private Navigator nav;
	private PoseProvider odoPP;
	private Pose poseStart;

	private boolean stoped;
	//private boolean reverse;



	public motors(DifferentialPilot motors){
		this.motors = motors;
		motors.setTravelSpeed(30);
		nav = new Navigator(motors); 
		odoPP = new OdometryPoseProvider(motors);
		poseStart = new Pose(0,5,0);
		this.start();
	}
	
	public void follow(){
		Pose p=odoPP.getPose();
		LCD.drawInt((int)p.getX(), 1, 2);
		LCD.drawInt((int)p.getY(), 1, 3);
		nav.followPath();
	}
	
	public boolean pathCompleted() throws InterruptedException{
		if(nav.pathCompleted()){
			Thread.sleep(200);
			return true;
		} else {
			Thread.sleep(200);
			return false;
		}
	}


	public void drivePathOne(){
		odoPP.setPose(poseStart);
		nav.addWaypoint(85, 5);					//nav.goTo(85, 5);
		
		//while(!nav.pathCompleted()){
			//follow();
			/*Pose p=odoPP.getPose();
			LCD.drawInt((int)p.getX(), 1, 2);
			LCD.drawInt((int)p.getY(), 1, 3);*/
			
		//}
		//nav.clearPath();
	
	}

	public void drivePathTwo(){
		nav.addWaypoint(85, 175);
		
		if(nav.waitForStop()){
			nav.followPath();
			Pose p=odoPP.getPose();
			LCD.drawInt((int)p.getX(), 1, 2);
			LCD.drawInt((int)p.getY(), 1, 3);
			stoped = true;
		}
		nav.clearPath();	//ta bort waypointsen 
		
	}

	public void drivePathThree(){
		nav.addWaypoint(0, 185);
		if(nav.waitForStop()){
			nav.followPath();
			Pose p=odoPP.getPose();
			LCD.drawInt((int)p.getX(), 1, 2);
			LCD.drawInt((int)p.getY(), 1, 3);
			
			stoped = true;
		}
		nav.clearPath();
	}
	public boolean atWayPoint(){
		if(stoped){
			stoped = false;
			return true;
		} else {
			return false;
		}
	}
}
