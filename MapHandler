import lejos.geom.Line;
import lejos.geom.Rectangle;
import lejos.nxt.LCD;
import lejos.nxt.Sound;
import lejos.robotics.localization.OdometryPoseProvider;
import lejos.robotics.mapping.LineMap;
import lejos.robotics.navigation.DifferentialPilot;
import lejos.robotics.navigation.Pose;

public class MapHandler{
	private Pose pose;
	private LineMap myMap;
	private Rectangle bounds;
	private Actuator act;
	private SleepThread sleepThread;

	private float lside = 180;	//180cm
	private float sside = 90;	//90 cm
	private Line [] lines; 
	private int i=0; 		//var i vektorn lines vi är
	private int kase;
	private float a, trackWidth=5, p=(float) 3.5; //a=avst från US till hinder, trackWidth = avst mellan hjulen på rob /2 (i cm)
	//p=bredden på hindret (i cm)
	private float x1,y1,x2,y2;

	private OdometryPoseProvider opp;
	private static LCDline lcdMap;
	private Line l;

	public MapHandler(Actuator act, DifferentialPilot diffmotor, OdometryPoseProvider opp){
		this.opp = opp;
		this.act=act;
		bounds = new Rectangle(0, 0,lside,sside);	
		lines = new Line[500];	
		sleepThread = new SleepThread();	//A thread that just sleeps and then returns false
		lcdMap = new LCDline(myMap,this);

		myMap = new LineMap(lines, bounds);
	}

	public void addObstacle(){
		if(act.getDistanceToObject()<255 && kase==1){		//om vi har ett avstånd till ett obstacle
			addLineOne();									//lägg till en linje
		}else if(act.getDistanceToObject()<255 && kase==2){
			addLineTwo();
		}else if(act.getDistanceToObject()<255 && kase==3){
			addLineThree();
		}
	}

	private synchronized void addLineOne(){						//lägg till en linje i line vektorn vi vägg 1
		pose=getPose();				//ta vår nuvarande pose
		if(act.getDistanceToObject() < 180 && !sleepThread.getFlag()){
			a=(float)act.getDistanceToObject();		//distance to obstacle
			x1=pose.getX()-p;			//xkoord för punkt 1. xkoord för robot-halva obstacle bredden
			if(x1 < 0){
				x1 = 0;
			}
			y1=pose.getY()+(a+trackWidth);	//ykoord för punkt 1. ykoord+avst till obstacle+halva bredden av rob
			x2=pose.getX()+(p);			//xkoord för punkt 2. xkoord för robot+halva obstacle bredden
			y2=pose.getY()+(a+trackWidth);	//ykoord för punkt 2. ykoord+avst till obstacle+halva bredden av rob
			l = new Line(x1, y1, x2, y2);	//skapar linjen	
			l.lengthen(5);
			lines [i]=l;
			i++;									//håller koll så vi inte lägger in i samma element i vektorn hela tiden
			lcdMap.draw();
			sleepThread.set();
			Sound.beep();
		}
	}

	private void addLineTwo(){						//lägg till en linje i line vektorn vid vägg 2
		pose = getPose();				//ta vår nuvarande pose
		if(act.getDistanceToObject() < 90 && !sleepThread.getFlag()){
			a=(float)act.getDistanceToObject();		//distance to obstacle
			x1=pose.getX()-a-(trackWidth);			//xkoord för punkt 1. xkoord för robot-halva obstacle bredden
			y1=pose.getY()-(p);	//ykoord för punkt 1. ykoord+avst till obstacle+halva bredden av rob
			x2=pose.getX()-a-(trackWidth);			//xkoord för punkt 2. xkoord för robot+halva obstacle bredden
			y2=pose.getY()+(p);	//ykoord för punkt 2. ykoord+avst till obstacle+halva bredden av rob
			l = new Line(x1, y1, x2, y2);
			l.lengthen(5);
			lines [i] = l;	//skapar linjen
			i++;									//håller koll så vi inte lägger in i samma element i vektorn hela tiden
			lcdMap.draw();
			sleepThread.set();
			Sound.beep();
		}
	}

	private void addLineThree(){						//lägg till en linje i line vektorn vid vägg 3
		pose=getPose();				//ta vår nuvarande pose
		a=(float)act.getDistanceToObject();		//distance to obstacle
		if(act.getDistanceToObject() < 180 && !sleepThread.getFlag()){
			x1=pose.getX()-(float)(p/2);			//xkoord för punkt 1. xkoord för robot-halva obstacle bredden
			y1=pose.getY()-(float)(a+trackWidth/2);	//ykoord för punkt 1. ykoord+avst till obstacle+halva bredden av rob
			x2=pose.getX()+(float)(p/2);			//xkoord för punkt 2. xkoord för robot+halva obstacle bredden
			y2=pose.getY()-(float)(a+trackWidth/2);	//ykoord för punkt 2. ykoord+avst till obstacle+halva bredden av rob
			l = new Line(x1, y1, x2, y2);		//skapar linjen
			l.lengthen(5);	
			lines [i] = l;	
			i++;									//håller koll så vi inte lägger in i samma element i vektorn hela tiden
			lcdMap.draw();
			sleepThread.set();
			Sound.beep();
		}
	}

	public LineMap returnMap(){
		myMap = new LineMap(lines, bounds);
		return myMap;
	}

	public void setKase(int kase){
		this.kase = kase;
	}

	public synchronized Pose getPose(){
		return opp.getPose();
	}

	public void setLines(){
		int k = 0;
		Line [] newLines;
		for(int i = 0; i < 500; i++){
			if(lines [i] != null){
				k++;
			}
		}
		newLines = new Line[k];
		for(int i = 0; i < k; i++){
			newLines[i] = lines[i];
		}	
		lines = new Line [k];
		for(int i = 0; i < k; i++){
			lines[i] = newLines[i];
		}	
	}

	public LCDline getLcdMap(){
		return  lcdMap;
	}
}
