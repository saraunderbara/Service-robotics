import lejos.geom.Line;
import lejos.geom.Rectangle;
import lejos.nxt.Sound;
import lejos.robotics.localization.OdometryPoseProvider;
import lejos.robotics.mapping.LineMap;
import lejos.robotics.navigation.DifferentialPilot;
import lejos.robotics.navigation.MoveProvider;
import lejos.robotics.navigation.Pose;


public class linjeMap {
	private Rectangle bounds;
	private float lside = 180;	//180cm
	private float sside = 90;	//90 cm
	private Line [] lines; 
	private LineMap myMap;
	private float xa,ya, headinga, xb, yb, headingb; 
	private double xfb,yfb, xfc, yfc;
	private Actuator act;
	private int i=0; 		//var i vektorn lines vi är
	private int kase;
	private Pose pose;

	private float a, trackWidth=5, c=5, p=(float) 3.5; //a=avst från US till hinder, trackWidth = avst mellan hjulen på rob /2 (i cm)
	//p=bredden på hindret (i cm)
	private float x1,y1,x2,y2;


	private static MoveProvider move;
	private static OdometryPoseProvider opp;


	public linjeMap(Actuator act, DifferentialPilot diffmotor){
		bounds = new Rectangle(0, 0,lside,sside);	
		lines = new Line[25];	
		this.act=act;

		opp=new OdometryPoseProvider(diffmotor);
	}

	public void addObstacle(){
		if(act.getDistanceToObject()>0 && kase==1){		//om vi har ett avstånd till ett obstacle
			addLineOne();									//lägg till en linje
		}else if(act.getDistanceToObject()>0 && kase==2){
			addLineTwo();
		}else if(act.getDistanceToObject()>0 && kase==3){
			addLineThree();
		}
	}


	private void addLineOne(){						//lägg till en linje i line vektorn vi vägg 1
		pose=opp.getPose();				//ta vår nuvarande pose
		if(act.getDistanceToObject() < 50){
			Sound.beepSequence();
			a=(float)act.getDistanceToObject();		//distance to obstacle
			x1=pose.getX();			//xkoord för punkt 1. xkoord för robot-halva obstacle bredden
			y1=pose.getY()+(a+trackWidth);	//ykoord för punkt 1. ykoord+avst till obstacle+halva bredden av rob
			x2=pose.getX()+(p);			//xkoord för punkt 2. xkoord för robot+halva obstacle bredden
			y2=pose.getY()+(a+trackWidth);	//ykoord för punkt 2. ykoord+avst till obstacle+halva bredden av rob
			Line l = new Line(x1, y1, x2, y2);	//skapar linjen
			l.lengthen(3);	
			lines [i]=l;	
			i++;									//håller koll så vi inte lägger in i samma element i vektorn hela tiden
		}
	}

	private void addLineTwo(){						//lägg till en linje i line vektorn vid vägg 2
		pose=opp.getPose();				//ta vår nuvarande pose
		if(act.getDistanceToObject() < 50){
			Sound.beep();
			a=(float)act.getDistanceToObject();		//distance to obstacle
			x1=pose.getX()-a-(trackWidth);			//xkoord för punkt 1. xkoord för robot-halva obstacle bredden
			y1=pose.getY()-(p);	//ykoord för punkt 1. ykoord+avst till obstacle+halva bredden av rob
			x2=pose.getX()-a-(trackWidth);			//xkoord för punkt 2. xkoord för robot+halva obstacle bredden
			y2=pose.getY()+(p);	//ykoord för punkt 2. ykoord+avst till obstacle+halva bredden av rob
			lines [i] = new Line(x1, y1, x2, y2);	//skapar linjen
			i++;									//håller koll så vi inte lägger in i samma element i vektorn hela tiden
		}
	}
	
	private void addLineThree(){						//lägg till en linje i line vektorn vid vägg 3
		pose=opp.getPose();				//ta vår nuvarande pose
		a=(float)act.getDistanceToObject();		//distance to obstacle
		if(act.getDistanceToObject() < 50){
			Sound.beep();
			x1=pose.getX()-(float)(p/2);			//xkoord för punkt 1. xkoord för robot-halva obstacle bredden
			y1=pose.getY()-(float)(a+trackWidth/2);	//ykoord för punkt 1. ykoord+avst till obstacle+halva bredden av rob
			x2=pose.getX()+(float)(p/2);			//xkoord för punkt 2. xkoord för robot+halva obstacle bredden
			y2=pose.getY()-(float)(a+trackWidth/2);	//ykoord för punkt 2. ykoord+avst till obstacle+halva bredden av rob
			lines [i] = new Line(x1, y1, x2, y2);	//skapar linjen
			i++;									//håller koll så vi inte lägger in i samma element i vektorn hela tiden
		}
	}

	public LineMap returnLine(){
		myMap = new LineMap(lines, bounds);
		return myMap;
	}

	public void setKase(int kase){
		this.kase = kase;
	}
}
